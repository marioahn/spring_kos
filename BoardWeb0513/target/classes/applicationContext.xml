<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Step1. polymorphism package에서 사용되는 Class Bean들 -->
	<!-- 1. 삼성tv 객체, scope="singleton" 스코프는 싱글톤이 기본옵션임
		- p-namespace: set함수들 호출ㅇㅇ
			- 이렇게 생.성.자의 argument로 sony가 있으면, 아래 소니bean(=객체)이 먼저 생성된다ㅇㅇ
			-> 즉,생성자도 default생성자가 아니라, sony가 매개변수로 di된 생성자가 호출되는 것
			-> 또한, 같은 타입이 매개변수에 들어가는 경우? index속성으로 구별해줌~!
			-> 위는 생성자로 di하는 방법. 아래는 이제 setter로 DI하는 코드! - property태그
			-> 근데, 아래 property안쓰고 p네임스페이스 쓰면 더 효율적임! -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV"
	init-method="initMethod" destroy-method="destroyMethod"
	scope="singleton"
	p:speaker-ref="sony" p:price="2700000">
		<constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="2700000"></constructor-arg>
		<property name="speaker" ref="apple"></property>
		<property name="price" value="2700000"></property>
	</bean> -->
	<!-- 2. 소니스피커 - 삼성은 DI해야하니까, 닫는태그로..! -->
	<!-- <bean id="sony" class="polymorphism.SonySpeaker"/>
	<bean id="apple" class="polymorphism.AppleSpeaker"/> -->
	
	<!-- Step2. 컬렉션 빈의 경우 -->
<!-- 	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map>
		</property>
	</bean> -->
	
	<!-- Step3. Annotation -->
	<!-- <bean id="tv" class="polymorphism.LgTV"/>
	<context:component-scan base-package="polymorphism"></context:component-scan>
	<bean id="sony" class="polymorphism.SonySpeaker"/> -->
	<!-- <bean id="apple" class="polymorphism.AppleSpeaker"/> -->
	
	<!-- Step4. 실습! -->
	<context:component-scan base-package="com.springbook.biz" />
	
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />	
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" />
	
</beans>
